/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.8.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.kubernetes.client.apis;

import io.kubernetes.client.ApiException;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1Binding;
import io.kubernetes.client.models.V1ComponentStatus;
import io.kubernetes.client.models.V1ComponentStatusList;
import io.kubernetes.client.models.V1ConfigMap;
import io.kubernetes.client.models.V1ConfigMapList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Endpoints;
import io.kubernetes.client.models.V1EndpointsList;
import io.kubernetes.client.models.V1Event;
import io.kubernetes.client.models.V1EventList;
import io.kubernetes.client.models.V1LimitRange;
import io.kubernetes.client.models.V1LimitRangeList;
import io.kubernetes.client.models.V1Namespace;
import io.kubernetes.client.models.V1NamespaceList;
import io.kubernetes.client.models.V1Node;
import io.kubernetes.client.models.V1NodeList;
import io.kubernetes.client.models.V1PersistentVolume;
import io.kubernetes.client.models.V1PersistentVolumeClaim;
import io.kubernetes.client.models.V1PersistentVolumeClaimList;
import io.kubernetes.client.models.V1PersistentVolumeList;
import io.kubernetes.client.models.V1Pod;
import io.kubernetes.client.models.V1PodList;
import io.kubernetes.client.models.V1PodTemplate;
import io.kubernetes.client.models.V1PodTemplateList;
import io.kubernetes.client.models.V1ReplicationController;
import io.kubernetes.client.models.V1ReplicationControllerList;
import io.kubernetes.client.models.V1ResourceQuota;
import io.kubernetes.client.models.V1ResourceQuotaList;
import io.kubernetes.client.models.V1Scale;
import io.kubernetes.client.models.V1Secret;
import io.kubernetes.client.models.V1SecretList;
import io.kubernetes.client.models.V1Service;
import io.kubernetes.client.models.V1ServiceAccount;
import io.kubernetes.client.models.V1ServiceAccountList;
import io.kubernetes.client.models.V1ServiceList;
import io.kubernetes.client.models.V1Status;
import io.kubernetes.client.models.V1beta1Eviction;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CoreV1Api
 */
@Ignore
public class CoreV1ApiTest {

    private final CoreV1Api api = new CoreV1Api();

    
    /**
     * 
     *
     * connect DELETE requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectDeleteNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectDeleteNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectDeleteNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectDeleteNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectDeleteNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectDeleteNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectDeleteNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to attach of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodAttachTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectGetNamespacedPodAttach(name, namespace, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to exec of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodExecTest() throws ApiException {
        String name = null;
        String namespace = null;
        String command = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectGetNamespacedPodExec(name, namespace, command, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to portforward of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodPortforwardTest() throws ApiException {
        String name = null;
        String namespace = null;
        Integer ports = null;
        String response = api.connectGetNamespacedPodPortforward(name, namespace, ports);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectGetNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectGetNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectGetNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectGetNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectGetNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectGetNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectGetNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectHeadNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectHeadNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectHeadNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectHeadNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectHeadNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectHeadNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectHeadNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectOptionsNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectOptionsNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectOptionsNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectOptionsNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectOptionsNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectOptionsNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectOptionsNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPatchNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectPatchNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPatchNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectPatchNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPatchNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectPatchNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPatchNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectPatchNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPatchNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectPatchNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPatchNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectPatchNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to attach of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodAttachTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectPostNamespacedPodAttach(name, namespace, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to exec of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodExecTest() throws ApiException {
        String name = null;
        String namespace = null;
        String command = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectPostNamespacedPodExec(name, namespace, command, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to portforward of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodPortforwardTest() throws ApiException {
        String name = null;
        String namespace = null;
        Integer ports = null;
        String response = api.connectPostNamespacedPodPortforward(name, namespace, ports);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectPostNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectPostNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectPostNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectPostNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectPostNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPostNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectPostNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectPutNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectPutNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectPutNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectPutNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectPutNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectPutNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectPutNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespaceTest() throws ApiException {
        V1Namespace body = null;
        String pretty = null;
        V1Namespace response = api.createNamespace(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Binding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedBindingTest() throws ApiException {
        String namespace = null;
        V1Binding body = null;
        String pretty = null;
        V1Binding response = api.createNamespacedBinding(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        V1ConfigMap body = null;
        String pretty = null;
        V1ConfigMap response = api.createNamespacedConfigMap(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        V1Endpoints body = null;
        String pretty = null;
        V1Endpoints response = api.createNamespacedEndpoints(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedEventTest() throws ApiException {
        String namespace = null;
        V1Event body = null;
        String pretty = null;
        V1Event response = api.createNamespacedEvent(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        V1LimitRange body = null;
        String pretty = null;
        V1LimitRange response = api.createNamespacedLimitRange(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        V1PersistentVolumeClaim response = api.createNamespacedPersistentVolumeClaim(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodTest() throws ApiException {
        String namespace = null;
        V1Pod body = null;
        String pretty = null;
        V1Pod response = api.createNamespacedPod(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create binding of a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Binding body = null;
        String pretty = null;
        V1Binding response = api.createNamespacedPodBinding(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create eviction of a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodEvictionTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Eviction body = null;
        String pretty = null;
        V1beta1Eviction response = api.createNamespacedPodEviction(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        V1PodTemplate body = null;
        String pretty = null;
        V1PodTemplate response = api.createNamespacedPodTemplate(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        V1ReplicationController body = null;
        String pretty = null;
        V1ReplicationController response = api.createNamespacedReplicationController(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        V1ResourceQuota body = null;
        String pretty = null;
        V1ResourceQuota response = api.createNamespacedResourceQuota(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedSecretTest() throws ApiException {
        String namespace = null;
        V1Secret body = null;
        String pretty = null;
        V1Secret response = api.createNamespacedSecret(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedServiceTest() throws ApiException {
        String namespace = null;
        V1Service body = null;
        String pretty = null;
        V1Service response = api.createNamespacedService(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        V1ServiceAccount body = null;
        String pretty = null;
        V1ServiceAccount response = api.createNamespacedServiceAccount(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeTest() throws ApiException {
        V1Node body = null;
        String pretty = null;
        V1Node response = api.createNode(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPersistentVolumeTest() throws ApiException {
        V1PersistentVolume body = null;
        String pretty = null;
        V1PersistentVolume response = api.createPersistentVolume(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedConfigMap(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedEndpoints(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedEventTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedEvent(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedLimitRange(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedPersistentVolumeClaim(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedPodTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedPod(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedPodTemplate(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedReplicationController(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedResourceQuota(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedSecretTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedSecret(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedServiceAccount(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNodeTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNode(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionPersistentVolumeTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionPersistentVolume(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespaceTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespace(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedConfigMap(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedEndpoints(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedEvent(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedLimitRange(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedPersistentVolumeClaim(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedPod(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedPodTemplate(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedReplicationController(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedResourceQuota(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedSecret(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1Status response = api.deleteNamespacedService(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedServiceAccount(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNode(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersistentVolumeTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deletePersistentVolume(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ComponentStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listComponentStatusTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ComponentStatusList response = api.listComponentStatus(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigMapForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ConfigMapList response = api.listConfigMapForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEndpointsForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1EndpointsList response = api.listEndpointsForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEventForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1EventList response = api.listEventForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLimitRangeForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1LimitRangeList response = api.listLimitRangeForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespaceTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1NamespaceList response = api.listNamespace(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ConfigMapList response = api.listNamespacedConfigMap(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1EndpointsList response = api.listNamespacedEndpoints(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedEventTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1EventList response = api.listNamespacedEvent(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1LimitRangeList response = api.listNamespacedLimitRange(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PersistentVolumeClaimList response = api.listNamespacedPersistentVolumeClaim(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPodTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PodList response = api.listNamespacedPod(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PodTemplateList response = api.listNamespacedPodTemplate(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ReplicationControllerList response = api.listNamespacedReplicationController(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ResourceQuotaList response = api.listNamespacedResourceQuota(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedSecretTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1SecretList response = api.listNamespacedSecret(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedServiceTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ServiceList response = api.listNamespacedService(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ServiceAccountList response = api.listNamespacedServiceAccount(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1NodeList response = api.listNode(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersistentVolumeTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PersistentVolumeList response = api.listPersistentVolume(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersistentVolumeClaimForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PersistentVolumeClaimList response = api.listPersistentVolumeClaimForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PodList response = api.listPodForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodTemplateForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1PodTemplateList response = api.listPodTemplateForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listReplicationControllerForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ReplicationControllerList response = api.listReplicationControllerForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listResourceQuotaForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ResourceQuotaList response = api.listResourceQuotaForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecretForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1SecretList response = api.listSecretForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceAccountForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ServiceAccountList response = api.listServiceAccountForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1ServiceList response = api.listServiceForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespaceTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1Namespace response = api.patchNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespaceStatusTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1Namespace response = api.patchNamespaceStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1ConfigMap response = api.patchNamespacedConfigMap(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Endpoints response = api.patchNamespacedEndpoints(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Event response = api.patchNamespacedEvent(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1LimitRange response = api.patchNamespacedLimitRange(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1PersistentVolumeClaim response = api.patchNamespacedPersistentVolumeClaim(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1PersistentVolumeClaim response = api.patchNamespacedPersistentVolumeClaimStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Pod response = api.patchNamespacedPod(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Pod response = api.patchNamespacedPodStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1PodTemplate response = api.patchNamespacedPodTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1ReplicationController response = api.patchNamespacedReplicationController(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicationControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Scale response = api.patchNamespacedReplicationControllerScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1ReplicationController response = api.patchNamespacedReplicationControllerStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1ResourceQuota response = api.patchNamespacedResourceQuota(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1ResourceQuota response = api.patchNamespacedResourceQuotaStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Secret response = api.patchNamespacedSecret(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Service response = api.patchNamespacedService(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1ServiceAccount response = api.patchNamespacedServiceAccount(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1Service response = api.patchNamespacedServiceStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNodeTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1Node response = api.patchNode(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNodeStatusTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1Node response = api.patchNodeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPersistentVolumeTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1PersistentVolume response = api.patchPersistentVolume(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPersistentVolumeStatusTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1PersistentVolume response = api.patchPersistentVolumeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyDELETENamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyDELETENamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyDELETENamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyDELETENamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENodeTest() throws ApiException {
        String name = null;
        String response = api.proxyDELETENode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy DELETE requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyDELETENodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyDELETENodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyGETNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyGETNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyGETNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyGETNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNodeTest() throws ApiException {
        String name = null;
        String response = api.proxyGETNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy GET requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyGETNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyGETNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyHEADNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyHEADNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyHEADNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyHEADNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNodeTest() throws ApiException {
        String name = null;
        String response = api.proxyHEADNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy HEAD requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyHEADNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyHEADNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyOPTIONSNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyOPTIONSNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyOPTIONSNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyOPTIONSNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNodeTest() throws ApiException {
        String name = null;
        String response = api.proxyOPTIONSNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy OPTIONS requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyOPTIONSNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyOPTIONSNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PATCH requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPATCHNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyPATCHNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PATCH requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPATCHNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyPATCHNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PATCH requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPATCHNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyPATCHNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PATCH requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPATCHNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyPATCHNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PATCH requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPATCHNodeTest() throws ApiException {
        String name = null;
        String response = api.proxyPATCHNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PATCH requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPATCHNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyPATCHNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyPOSTNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyPOSTNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyPOSTNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyPOSTNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNodeTest() throws ApiException {
        String name = null;
        String response = api.proxyPOSTNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy POST requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPOSTNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyPOSTNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyPUTNamespacedPod(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedPodWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyPUTNamespacedPodWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String response = api.proxyPUTNamespacedService(name, namespace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNamespacedServiceWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.proxyPUTNamespacedServiceWithPath(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNodeTest() throws ApiException {
        String name = null;
        String response = api.proxyPUTNode(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * proxy PUT requests to Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyPUTNodeWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.proxyPUTNodeWithPath(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ComponentStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readComponentStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        V1ComponentStatus response = api.readComponentStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Namespace response = api.readNamespace(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespaceStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        V1Namespace response = api.readNamespaceStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1ConfigMap response = api.readNamespacedConfigMap(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Endpoints response = api.readNamespacedEndpoints(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Event response = api.readNamespacedEvent(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1LimitRange response = api.readNamespacedLimitRange(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1PersistentVolumeClaim response = api.readNamespacedPersistentVolumeClaim(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1PersistentVolumeClaim response = api.readNamespacedPersistentVolumeClaimStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Pod response = api.readNamespacedPod(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read log of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodLogTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean follow = null;
        Integer limitBytes = null;
        String pretty = null;
        Boolean previous = null;
        Integer sinceSeconds = null;
        Integer tailLines = null;
        Boolean timestamps = null;
        String response = api.readNamespacedPodLog(name, namespace, container, follow, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1Pod response = api.readNamespacedPodStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1PodTemplate response = api.readNamespacedPodTemplate(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1ReplicationController response = api.readNamespacedReplicationController(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicationControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1Scale response = api.readNamespacedReplicationControllerScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1ReplicationController response = api.readNamespacedReplicationControllerStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1ResourceQuota response = api.readNamespacedResourceQuota(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1ResourceQuota response = api.readNamespacedResourceQuotaStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Secret response = api.readNamespacedSecret(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Service response = api.readNamespacedService(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1ServiceAccount response = api.readNamespacedServiceAccount(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1Service response = api.readNamespacedServiceStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1Node response = api.readNode(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNodeStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        V1Node response = api.readNodeStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersistentVolumeTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1PersistentVolume response = api.readPersistentVolume(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersistentVolumeStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        V1PersistentVolume response = api.readPersistentVolumeStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespaceTest() throws ApiException {
        String name = null;
        V1Namespace body = null;
        String pretty = null;
        V1Namespace response = api.replaceNamespace(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace finalize of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespaceFinalizeTest() throws ApiException {
        String name = null;
        V1Namespace body = null;
        String pretty = null;
        V1Namespace response = api.replaceNamespaceFinalize(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespaceStatusTest() throws ApiException {
        String name = null;
        V1Namespace body = null;
        String pretty = null;
        V1Namespace response = api.replaceNamespaceStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ConfigMap body = null;
        String pretty = null;
        V1ConfigMap response = api.replaceNamespacedConfigMap(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Endpoints body = null;
        String pretty = null;
        V1Endpoints response = api.replaceNamespacedEndpoints(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Event body = null;
        String pretty = null;
        V1Event response = api.replaceNamespacedEvent(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1LimitRange body = null;
        String pretty = null;
        V1LimitRange response = api.replaceNamespacedLimitRange(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        V1PersistentVolumeClaim response = api.replaceNamespacedPersistentVolumeClaim(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PersistentVolumeClaim body = null;
        String pretty = null;
        V1PersistentVolumeClaim response = api.replaceNamespacedPersistentVolumeClaimStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Pod body = null;
        String pretty = null;
        V1Pod response = api.replaceNamespacedPod(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Pod body = null;
        String pretty = null;
        V1Pod response = api.replaceNamespacedPodStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1PodTemplate body = null;
        String pretty = null;
        V1PodTemplate response = api.replaceNamespacedPodTemplate(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ReplicationController body = null;
        String pretty = null;
        V1ReplicationController response = api.replaceNamespacedReplicationController(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicationControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Scale body = null;
        String pretty = null;
        V1Scale response = api.replaceNamespacedReplicationControllerScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ReplicationController body = null;
        String pretty = null;
        V1ReplicationController response = api.replaceNamespacedReplicationControllerStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ResourceQuota body = null;
        String pretty = null;
        V1ResourceQuota response = api.replaceNamespacedResourceQuota(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ResourceQuota body = null;
        String pretty = null;
        V1ResourceQuota response = api.replaceNamespacedResourceQuotaStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Secret body = null;
        String pretty = null;
        V1Secret response = api.replaceNamespacedSecret(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Service body = null;
        String pretty = null;
        V1Service response = api.replaceNamespacedService(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1ServiceAccount body = null;
        String pretty = null;
        V1ServiceAccount response = api.replaceNamespacedServiceAccount(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1Service body = null;
        String pretty = null;
        V1Service response = api.replaceNamespacedServiceStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNodeTest() throws ApiException {
        String name = null;
        V1Node body = null;
        String pretty = null;
        V1Node response = api.replaceNode(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNodeStatusTest() throws ApiException {
        String name = null;
        V1Node body = null;
        String pretty = null;
        V1Node response = api.replaceNodeStatus(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePersistentVolumeTest() throws ApiException {
        String name = null;
        V1PersistentVolume body = null;
        String pretty = null;
        V1PersistentVolume response = api.replacePersistentVolume(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePersistentVolumeStatusTest() throws ApiException {
        String name = null;
        V1PersistentVolume body = null;
        String pretty = null;
        V1PersistentVolume response = api.replacePersistentVolumeStatus(name, body, pretty);

        // TODO: test validations
    }
    
}
