/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.8.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.kubernetes.client.apis;

import io.kubernetes.client.ApiException;
import io.kubernetes.client.models.ExtensionsV1beta1Deployment;
import io.kubernetes.client.models.ExtensionsV1beta1DeploymentList;
import io.kubernetes.client.models.ExtensionsV1beta1DeploymentRollback;
import io.kubernetes.client.models.ExtensionsV1beta1Scale;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import io.kubernetes.client.models.V1beta1DaemonSet;
import io.kubernetes.client.models.V1beta1DaemonSetList;
import io.kubernetes.client.models.V1beta1Ingress;
import io.kubernetes.client.models.V1beta1IngressList;
import io.kubernetes.client.models.V1beta1NetworkPolicy;
import io.kubernetes.client.models.V1beta1NetworkPolicyList;
import io.kubernetes.client.models.V1beta1PodSecurityPolicy;
import io.kubernetes.client.models.V1beta1PodSecurityPolicyList;
import io.kubernetes.client.models.V1beta1ReplicaSet;
import io.kubernetes.client.models.V1beta1ReplicaSetList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExtensionsV1beta1Api
 */
@Ignore
public class ExtensionsV1beta1ApiTest {

    private final ExtensionsV1beta1Api api = new ExtensionsV1beta1Api();

    
    /**
     * 
     *
     * create a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        V1beta1DaemonSet body = null;
        String pretty = null;
        V1beta1DaemonSet response = api.createNamespacedDaemonSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        ExtensionsV1beta1Deployment body = null;
        String pretty = null;
        ExtensionsV1beta1Deployment response = api.createNamespacedDeployment(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create rollback of a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDeploymentRollbackTest() throws ApiException {
        String name = null;
        String namespace = null;
        ExtensionsV1beta1DeploymentRollback body = null;
        String pretty = null;
        ExtensionsV1beta1DeploymentRollback response = api.createNamespacedDeploymentRollback(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedIngressTest() throws ApiException {
        String namespace = null;
        V1beta1Ingress body = null;
        String pretty = null;
        V1beta1Ingress response = api.createNamespacedIngress(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        V1beta1NetworkPolicy body = null;
        String pretty = null;
        V1beta1NetworkPolicy response = api.createNamespacedNetworkPolicy(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        V1beta1ReplicaSet body = null;
        String pretty = null;
        V1beta1ReplicaSet response = api.createNamespacedReplicaSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPodSecurityPolicyTest() throws ApiException {
        V1beta1PodSecurityPolicy body = null;
        String pretty = null;
        V1beta1PodSecurityPolicy response = api.createPodSecurityPolicy(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedDaemonSet(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedDeployment(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedIngress(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedNetworkPolicy(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedReplicaSet(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionPodSecurityPolicyTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionPodSecurityPolicy(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedDaemonSet(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedDeployment(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedIngress(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedNetworkPolicy(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedReplicaSet(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePodSecurityPolicyTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deletePodSecurityPolicy(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDaemonSetForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1DaemonSetList response = api.listDaemonSetForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDeploymentForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ExtensionsV1beta1DeploymentList response = api.listDeploymentForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIngressForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1IngressList response = api.listIngressForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1DaemonSetList response = api.listNamespacedDaemonSet(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ExtensionsV1beta1DeploymentList response = api.listNamespacedDeployment(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1IngressList response = api.listNamespacedIngress(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1NetworkPolicyList response = api.listNamespacedNetworkPolicy(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1ReplicaSetList response = api.listNamespacedReplicaSet(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkPolicyForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1NetworkPolicyList response = api.listNetworkPolicyForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPodSecurityPolicyTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1PodSecurityPolicyList response = api.listPodSecurityPolicy(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listReplicaSetForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1ReplicaSetList response = api.listReplicaSetForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1DaemonSet response = api.patchNamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1DaemonSet response = api.patchNamespacedDaemonSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        ExtensionsV1beta1Deployment response = api.patchNamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.patchNamespacedDeploymentScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        ExtensionsV1beta1Deployment response = api.patchNamespacedDeploymentStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1Ingress response = api.patchNamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1Ingress response = api.patchNamespacedIngressStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1NetworkPolicy response = api.patchNamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1ReplicaSet response = api.patchNamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.patchNamespacedReplicaSetScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1beta1ReplicaSet response = api.patchNamespacedReplicaSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicationControllerDummy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedReplicationControllerDummyScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.patchNamespacedReplicationControllerDummyScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPodSecurityPolicyTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1beta1PodSecurityPolicy response = api.patchPodSecurityPolicy(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1beta1DaemonSet response = api.readNamespacedDaemonSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1beta1DaemonSet response = api.readNamespacedDaemonSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ExtensionsV1beta1Deployment response = api.readNamespacedDeployment(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.readNamespacedDeploymentScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ExtensionsV1beta1Deployment response = api.readNamespacedDeploymentStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1beta1Ingress response = api.readNamespacedIngress(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1beta1Ingress response = api.readNamespacedIngressStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1beta1NetworkPolicy response = api.readNamespacedNetworkPolicy(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1beta1ReplicaSet response = api.readNamespacedReplicaSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.readNamespacedReplicaSetScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1beta1ReplicaSet response = api.readNamespacedReplicaSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicationControllerDummy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedReplicationControllerDummyScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.readNamespacedReplicationControllerDummyScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPodSecurityPolicyTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1beta1PodSecurityPolicy response = api.readPodSecurityPolicy(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1DaemonSet body = null;
        String pretty = null;
        V1beta1DaemonSet response = api.replaceNamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1DaemonSet body = null;
        String pretty = null;
        V1beta1DaemonSet response = api.replaceNamespacedDaemonSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        ExtensionsV1beta1Deployment body = null;
        String pretty = null;
        ExtensionsV1beta1Deployment response = api.replaceNamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        ExtensionsV1beta1Scale body = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.replaceNamespacedDeploymentScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        ExtensionsV1beta1Deployment body = null;
        String pretty = null;
        ExtensionsV1beta1Deployment response = api.replaceNamespacedDeploymentStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Ingress body = null;
        String pretty = null;
        V1beta1Ingress response = api.replaceNamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1Ingress body = null;
        String pretty = null;
        V1beta1Ingress response = api.replaceNamespacedIngressStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1NetworkPolicy body = null;
        String pretty = null;
        V1beta1NetworkPolicy response = api.replaceNamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1ReplicaSet body = null;
        String pretty = null;
        V1beta1ReplicaSet response = api.replaceNamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        ExtensionsV1beta1Scale body = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.replaceNamespacedReplicaSetScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1beta1ReplicaSet body = null;
        String pretty = null;
        V1beta1ReplicaSet response = api.replaceNamespacedReplicaSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicationControllerDummy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedReplicationControllerDummyScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        ExtensionsV1beta1Scale body = null;
        String pretty = null;
        ExtensionsV1beta1Scale response = api.replaceNamespacedReplicationControllerDummyScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PodSecurityPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePodSecurityPolicyTest() throws ApiException {
        String name = null;
        V1beta1PodSecurityPolicy body = null;
        String pretty = null;
        V1beta1PodSecurityPolicy response = api.replacePodSecurityPolicy(name, body, pretty);

        // TODO: test validations
    }
    
}
