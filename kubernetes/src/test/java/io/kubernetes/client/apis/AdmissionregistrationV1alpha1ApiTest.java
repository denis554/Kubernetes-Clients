/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.8.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.kubernetes.client.apis;

import io.kubernetes.client.ApiException;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import io.kubernetes.client.models.V1alpha1ExternalAdmissionHookConfiguration;
import io.kubernetes.client.models.V1alpha1ExternalAdmissionHookConfigurationList;
import io.kubernetes.client.models.V1alpha1InitializerConfiguration;
import io.kubernetes.client.models.V1alpha1InitializerConfigurationList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdmissionregistrationV1alpha1Api
 */
@Ignore
public class AdmissionregistrationV1alpha1ApiTest {

    private final AdmissionregistrationV1alpha1Api api = new AdmissionregistrationV1alpha1Api();

    
    /**
     * 
     *
     * create an ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExternalAdmissionHookConfigurationTest() throws ApiException {
        V1alpha1ExternalAdmissionHookConfiguration body = null;
        String pretty = null;
        V1alpha1ExternalAdmissionHookConfiguration response = api.createExternalAdmissionHookConfiguration(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInitializerConfigurationTest() throws ApiException {
        V1alpha1InitializerConfiguration body = null;
        String pretty = null;
        V1alpha1InitializerConfiguration response = api.createInitializerConfiguration(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionExternalAdmissionHookConfigurationTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionExternalAdmissionHookConfiguration(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionInitializerConfigurationTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionInitializerConfiguration(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalAdmissionHookConfigurationTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteExternalAdmissionHookConfiguration(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInitializerConfigurationTest() throws ApiException {
        String name = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteInitializerConfiguration(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExternalAdmissionHookConfigurationTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1ExternalAdmissionHookConfigurationList response = api.listExternalAdmissionHookConfiguration(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInitializerConfigurationTest() throws ApiException {
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1InitializerConfigurationList response = api.listInitializerConfiguration(pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExternalAdmissionHookConfigurationTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1alpha1ExternalAdmissionHookConfiguration response = api.patchExternalAdmissionHookConfiguration(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchInitializerConfigurationTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        V1alpha1InitializerConfiguration response = api.patchInitializerConfiguration(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExternalAdmissionHookConfigurationTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1alpha1ExternalAdmissionHookConfiguration response = api.readExternalAdmissionHookConfiguration(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readInitializerConfigurationTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1alpha1InitializerConfiguration response = api.readInitializerConfiguration(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ExternalAdmissionHookConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExternalAdmissionHookConfigurationTest() throws ApiException {
        String name = null;
        V1alpha1ExternalAdmissionHookConfiguration body = null;
        String pretty = null;
        V1alpha1ExternalAdmissionHookConfiguration response = api.replaceExternalAdmissionHookConfiguration(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified InitializerConfiguration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceInitializerConfigurationTest() throws ApiException {
        String name = null;
        V1alpha1InitializerConfiguration body = null;
        String pretty = null;
        V1alpha1InitializerConfiguration response = api.replaceInitializerConfiguration(name, body, pretty);

        // TODO: test validations
    }
    
}
